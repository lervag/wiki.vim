*wiki.txt*    A simple wiki plugin for Vim
*wiki.vim*

Author:  Karl Yngve Lervåg <karl.yngve@gmail.com>
License: MIT license {{{

  Copyright (c) 2021 Karl Yngve Lervåg

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

}}}

==============================================================================
CONTENTS                                                        *wiki-contents*

  Introduction                               |wiki-intro|
    Requirements                             |wiki-intro-requirements|
    Features                                 |wiki-intro-features|
  Configuration                              |wiki-config|
    Options                                  |wiki-config-options|
    Events                                   |wiki-config-events|
  Mappings                                   |wiki-mappings|
    Text objects                             |wiki-mappings-text-obj|
    Journal mappings                         |wiki-mappings-default|
  Commands                                   |wiki-commands|
  Links                                      |wiki-link|
    Link URLs                                |wiki-link-url|
    Wiki links                               |wiki-link-wiki|
    Markdown links                           |wiki-link-markdown|
    Markdown image links                     |wiki-link-image|
    Reference links                          |wiki-link-reference|
    Zotero shortlinks                        |wiki-link-zotero|
    AsciiDoc cross references                |wiki-link-adoc-xref|
    AsciiDoc link macro                      |wiki-link-adoc-link|
  Completion                                 |wiki-completion|
    Autocomplete                             |wiki-completion-auto|
  Tags                                       |wiki-tags|
  Templates                                  |wiki-templates|
    Template function context                |wiki-templates-context|
    Template file format                     |wiki-templates-format|
    Journal summaries                        |wiki-templates-journal-summaries|

==============================================================================
INTRODUCTION                                                       *wiki-intro*

This is a Vim plugin for writing and maintaining a personal wiki. The plugin
was initially based on vimwiki (https://github.com/vimwiki/vimwiki), but it is
written mostly from scratch and is based on a more "do one thing and do it
well" philosophy.

The plugin will activate by default for any `.wiki` files, but this may be
customized with |g:wiki_filetypes| and |g:wiki_global_load|. One may also
explicitly activate with |WikiEnable|. The wiki root is automatically detected
as long as there is a top-level `index.wiki` file available. If no such file
is found, it sets the root to the same directory as the current file. In
addition, one may specify a main wiki with the |g:wiki_root| option. This
allows convenient mappings and commands for opening the main wiki from
anywhere.

Note: |wiki.vim| is `not` a filetype plugin. It is designed so that it may be used
      along with filetype plugins, e.g. for dedicated Markdown plugins. One
      may also use `wiki-ft.vim` (https://github.com/lervag/wiki-ft.vim) for
      simple syntax highlighting and folding of `.wiki` files, if desired.

------------------------------------------------------------------------------
REQUIREMENTS                                          *wiki-intro-requirements*

This plugin is mainly developed on and for Linux. Some or most of the features
should still work on Windows and OSX, but currently there are no guaranties.
On Windows, it is assumed that users enable 'shellslash' to avoid issues with
backslashes versus forward slashes.

The following is a list of external tools that are used for some of the
features:

  | Program                      | Feature                        |
  | ---------------------------- + ------------------------------ |
  | `date`                         | for journal related stuff      |
  | `xdg-open`                     | for opening `pdf` files on Linux |
  | `pandoc` (https://pandoc.org/) | for |WikiExport|                 |

------------------------------------------------------------------------------
FEATURES                                                  *wiki-intro-features*

- Wiki functionality
  - Global mappings for accessing a specified wiki
  - Local mappings for
    - Navigation (follow links, go back, etc)
    - Renaming pages (will also update links in other pages)
    - Creating a table of contents
    - Toggling links
    - Viewing wiki link graphs
  - Completion of wiki links and link anchors
  - Text objects
    - `iu au` Link URL
    - `it at` Link text
  - New page templates
- Support for journal entries
  - Navigating the journal back and forth with `<Plug>(wiki-journal-next)`
    and `<Plug>(wiki-journal-prev)`.
  - Support for parsing journal entries in order to make weekly and monthly
    summaries. The parsed result needs manual editing for good results.
- Utility functionality
  - |WikiExport| command for exporting to e.g. `pdf` with `pandoc`
- Third-party support
  - |CtrlP|: |CtrlPWiki| command (https://github.com/ctrlpvim/ctrlp.vim)
  - |fzf|: |WikiFzfPages|, |WikiFzfToc|, and |WikiFzfTags| commands
    (https://github.com/junegunn/fzf.vim)
  - |unite| source (https://github.com/Shougo/unite.vim)
  - |denite| source (https://github.com/Shougo/denite.nvim)

------------------------------------------------------------------------------
USAGE                                                        *wiki-intro-usage*

This outlines the basic steps to get started:

1. Create a wiki directory where the wiki files should be stored, for instance
   `~/wiki`.

2. Add the following to your `vimrc` file: >

   let g:wiki_root = '~/wiki'

3. Now you can open the index file (by default `index.wiki`) with `<leader>ww`
   and start to add your notes as desired.

==============================================================================
CONFIGURATION                                                     *wiki-config*

The following subsections presents a list of available options and events that
can be used to customize the behaviour of wiki.vim.

------------------------------------------------------------------------------
OPTIONS                                                   *wiki-config-options*

*g:wiki_cache_root*
  Specify the cache directory for |wiki.vim|.

  Default value: OS dependent

    `Linux and MacOS`: '~/.cache/wiki.vim/'
    `Windows`:         Standard temporary folder (based on |tempname()|)

*g:wiki_cache_persistent*
  Specify whether to use persistent caching.

  Default value: 1

*g:wiki_date_exe*
  Specify the executable for `date`, which is used "behind the scenes" to
  manipulate and calculate dates for the journal features.

  On MacOS/OSX, one can install `coreutils` from Homebrew and then use the
  `gdate` program with: >

    let g:wiki_date_exe = 'gdate'
<
  Default: 'date'

*g:wiki_export*
  A dictionary that specifies the default configuration for |WikiExport|
  options. See the specifications for the options for more information.

  Default: >
    let g:wiki_export = {
        \ 'args' : '',
        \ 'from_format' : 'markdown',
        \ 'ext' : 'pdf',
        \ 'link_ext_replace': v:false,
        \ 'view' : v:false,
        \ 'output': fnamemodify(tempname(), ':h'),
        \}

*g:wiki_filetypes*
  List of filetypes for which |wiki.vim| should be enabled.

  Default: ['wiki']

*g:wiki_file_handler*
  Name of a function or a |FuncRef| for a function that should be used to
  handle local files (see also |wiki-link-url|). The function should give
  a non-zero return value if it properly handled the URL. If not, the plugin
  falls back to opening the URL with Vim. An example: >

    let g:wiki_file_handler = 'WikiFileHandler'

    function! WikiFileHandler(...) abort dict
      if self.path =~# 'pdf$'
        silent execute '!zathura' fnameescape(self.path) '&'
        return 1
      endif

      return 0
    endfunction

*g:wiki_fzf_pages_force_create_key*
  Key combination that, when pressed while searching with |WikiFzfPages|, will
  create a new page with the name of the query. The value must be a string
  recognized by fzf's `--expect` argument; see fzf's manual page for a list of
  available keys.

  Default: `'alt-enter'`

*g:wiki_fzf_pages_opts*
  A string with additional user options for |WikiFzfPages|. This can be used
  e.g. to add a previewer. Users should be aware that the page candidates are
  "prettified" with the `--with-nth=1` and `-d` options for fzf, so to obtain
  the page path in a previewer option one must use the field index expression 1.
  E.g.: >

    let g:wiki_fzf_pages_opts = '--preview "cat {1}"'
<
  Default: `''`

*g:wiki_global_load*
  |wiki.vim| is inherently agnostic in that it assumes any recognized filetype
  specifies a wiki. However, some people might want to load |wiki.vim| for
  ONLY files within a globally specified directory |g:wiki_root|. To allow
  this behaviour, one can set this option to 0.

  Default: 1

*g:wiki_journal*
  A dictionary for configuring the journal/diary feature. Available options
  are:

    name~
      Name of journal (used to set journal path).

    frequency~
      One of 'daily', 'weekly', or 'monthly'.

    date_format~
      Dictionary of filename formats for the 'daily', 'weekly', and 'monthly'
      frequencies. The formats may contain the following keys:

        %y  year (two digits)
        %Y  year (four digits)
        %m  month (01..12)
        %d  day of month (01..31)
        %V  ISO week number with Monday as first day of week
        %U  week number with Sunday as first day of week

  Default: >

    let g:wiki_journal = {
        \ 'name': 'journal',
        \ 'frequency': 'daily',
        \ 'date_format': {
        \   'daily' : '%Y-%m-%d',
        \   'weekly' : '%Y_w%V',
        \   'monthly' : '%Y_m%m',
        \ },
        \}

*g:wiki_link_extension*
  Specify the extension that should be applied to wiki links. This should be
  in the format `.ext`, e.g. `.md` or `.wiki`.

  Default: ''

*g:wiki_link_toggle_on_follow*
  This option allows to disable the toggle behaviour in |WikiLinkFollow| where
  "normal" text under the cursor is transformed into links. The behaviour is
  enabled by default. If disabled, one may still use |WikiLinkToggle| to
  transform text into links.

  Default: 1

*g:wiki_link_target_type*
  This option may be used to pick the default style of link that will be used.

  Available styles for the default target type are:

    `md` (|wiki-link-markdown|)
      Markdown style links.

    `wiki` (|wiki-link-wiki|)
      Wiki style links.

    `adoc_xref_bracket` (|wiki-link-adoc-xref|)
    `adoc_xref_inline`
      AsciiDoc cross-reference style links (angled brackets style or inline
      `xref:...` style).

  Toggling between link types can still be achieved using |WikiLinkToggle|.

  Default: 'wiki'

*g:wiki_link_toggles*
  This option specifies the template for toggling a specific type of link with
  |WikiLingToggle| or |<plug>(wiki-link-toggle)|.

  This allows to customize how links are changed when they are toggled. For
  instance, to add/remove extensions for wiki and markdown style links, one
  could use: >

    function WikiToggleWiki(url, text) abort dict
      return wiki#link#md#template(a:url . '.wiki',
            \ empty(a:text) ? a:url : a:text)
    endfunction

    function WikiToggleMd(url, text) abort dict
      let l:url = substitute(a:url, '\.wiki$', '', '')
      return wiki#link#wiki#template(l:url, a:text)
    endfunction

    let g:wiki_link_toggles = {
          \ 'md': 'WikiToggleMd',
          \ 'wiki': 'WikiToggleWiki',
          \}
<
  Default: >

    let g:wiki_link_toggles = {
          \ 'md': 'wiki#link#wiki#template',
          \ 'wiki': 'wiki#link#md#template',
          \ 'date': 'wiki#link#wiki#template',
          \ 'shortcite': 'wiki#link#md#template',
          \ 'url': 'wiki#link#md#template',
          \}

*g:wiki_map_create_page*
  This option may be used to specify a map or transformation for page names
  provided to |WikiOpen|. For example: >

    let g:wiki_map_create_page = 'MyFunction'

    function MyFunction(name) abort
      let l:name = wiki#get_root() . '/' . a:name

      " If the file is new, then append the current date
      return filereadable(l:name)
            \ ? a:name
            \ : a:name . '_' . strftime('%Y%m%d')
    endfunction
<
  With the above setting, if one enters a page name "foo" for |WikiOpen| on
  the date 2020-04-11, the page "foo_20200411" will be created.

  Default: ''

*g:wiki_map_link_create*
  This option may be used to transform text before creating a new link. An
  example: >

    let g:wiki_map_link_create = 'MyFunction'

    function MyFunction(text) abort
      return substitute(tolower(a:text), '\s\+', '-', 'g')
    endfunction
<
  With the above setting, links created with |WikiLinkFollow| or
  |WikiLinkToggle| (or related mappings) will be transformed by `MyFunction`.
  As an example, if one creates a link from the text "Some text", the link
  becomes "[[some-text|Some text]]".

  Default: ''

*g:wiki_mappings_use_defaults*
  Whether or not to use default mappings (see |wiki-mappings-default|). The
  allowed values are:

    'all'     use all default mappings
    'local'   use only buffer-local default mappings
    'global'  use only global default mappings
    'none'    do not use any of the default mappings

  Default: 'all'

*g:wiki_mappings_global*
*g:wiki_mappings_local*
  These options allow one to customize global and buffer local mappings
  through dictionaries where the keys are the right-hand sides and the values
  are the desired mappings, e.g.: >

    let g:wiki_mappings_global = {
        \ '<plug>(wiki-reload)' : ',wx',
        \}
<
  This example maps `,wx` to |<plug>(wiki-reload)|. The other maps are kept at
  their default (unless |g:wiki_mappings_use_default| specifies otherwise).
  Some mappings are defined in other mod s than normal mode. In this
  case, one can use the following syntax: >

    let g:wiki_mappings_local = {
          \ '<plug>(wiki-export)' : '<c-p>',
          \ 'x_<plug>(wiki-export)' : '<c-p>',
          \}
<
  Here `<c-p>` is mapped to |<plug>(wiki-export)| in normal mode and
  visual mode, respectively. The available `<plug>` mappings are listed in
  |wiki-mappings|.

  Default: Undefined

*g:wiki_month_names*
  A list of the names for each month. Used for interpolating month names in
  the month template, |g:wiki_template_title_month|.

  Default: `['January', 'February', ..., 'December']`

*g:wiki_resolver*
  The name of the function to resolve wiki-schemed links, i.e., the standard
  link scheme. The default should work well for most people, but this option
  allows to adjust the resolver to ones own liking.

  The function takes two arguments:

    fname~
      The unresolved filename. This may be empty, which is typically the case
      for inter-page links (e.g. `[[#SomeSection]]`).

    origin~
      The path of the origin file, i.e. the file from which the link was
      activated. This may be empty if a link is followed programmatically from
      an empty buffer.

  The function must return an absolute path to the destination file.

  Note: The function `wiki#get_root()` can be useful to get the path to the
        wiki root.

  Default: `'wiki#url#wiki#resolver'`

*g:wiki_root*
  Option to specify the wiki root path, i.e. the wiki that is opened with the
  `<leader>ww` mapping. The option value must be a string that is either

    i)   a specific path, or
    ii)  the name of a function that returns a path.

  The latter method allows more flexible determination of the root path, e.g.
  project specific root paths. An example: >

    function! WikiRoot()
      let l:local = finddir('wiki', ';./')
      return !empty(l:local) ? l:local : '~/wiki'
    endfunction

    let g:wiki_root = 'WikiRoot'
<
  This setting would first search for a `wiki` directory in the current
  relative directory, and fallback to a global `wiki` if the local wiki is not
  found.

  Note: The (returned) path must be either a relative or absolute path to an
        existing directory.

  Default: ''

*g:wiki_toc_title*
  The title of TOC listings.

  Default: `'Contents'`

*g:wiki_tags*
  A dictionary that specifies the default configuration for |WikiTagSearch|
  options. See the specifications for the options for more information.

  Default: >
    let g:wiki_tags = {
        \ 'output' : 'loclist',
        }

*g:wiki_tags_format_pattern*
  A regular expression describing the search pattern for a single tag. See
  also |wiki-tags| for more info on the tags feature.

  The default expression recognizes tags confined inside `:`s, e.g. `:mytag:`.
  To change the format to recognize hashed tags like `#tag1` and `#my-other-tag`,
  one can use something like this: >

    let g:wiki_tags_format_pattern = '\v%(^|\s)#\zs[^# ]+'
<
  Default: >
    let g:wiki_tags_format_pattern = '\v%(^|\s):\zs[^: ]+\ze:'

*g:wiki_tags_scan_num_lines*
  A number of lines to read from the top of a page when scanning tags. To scan
  lines from the bottom, use a negative number, e.g. >

    let g:wiki_tags_scan_num_lines = -10
<
  To scan the entire files, use: >

    let g:wiki_tags_scan_num_lines = 'all'
<
  Default: >
    let g:wiki_tags_scan_num_lines = 15

*g:wiki_templates*
  A list of templates for prefilling new pages. Each template should be
  specified as a dictionary with a matcher and a source. Matching may be done
  with regular expressions or with user functions. Similarly, sources can be
  specified as a file source as specified in |wiki-templates-format|, or as
  a user function with a single argument `context` as specified in
  |wiki-templates-context|.

  The possible dictionary keys of a template are:

    match_re~
      |String|
      A regular expression that will be matched against the new page name.

      Note: The name is not the same as the path and it does not include the
            file name extension. For more advanced matching, you need a custom
            matcher function, i.e. the next key.

    match_func~
      |Funcref|
      A function that should return |v:true| if the template should be applied
      or |v:false| if it should not apply.

    source_filename~
      |String|
      The path to a template file. If this is a relative path, then it will be
      relative to whichever path Vim or neovim is currently at when the
      template is executed. If the template file is not found, then the
      template will not be applied and the next template in the list will be
      tried.

    source_func~
      |Funcref|
      A user function that can use e.g. |append()| to add lines to the file.

  For example: >

    function! TemplateFallback(context)
      call append(0, '# ' . a:context.name)
      call append(1, '')
      call append(2, 'Foobar')
    endfunction

    let g:wiki_templates = [
          \ { 'match_re': 'index',
          \   'source_filename': '/home/user/templates/index.md'},
          \ { 'match_re': 'foo',
          \   'source_filename': '.footemplate.md'},
          \ { 'match_func': {x -> v:true},
          \   'source_func': function('TemplateFallback')},
          \]
<
  Notice that in the second template, the `;` is appended to the source
  filename. This means the template file is first searched for in the current
  directory of the new page, then in the parent directory, and so on. If the
  template file is not found, then the next template will be tried.

  Default: `[]`

*g:wiki_template_title_month*
  A string that specifies the title of the month template. The following keys
  are interpolated:

    `%(month)`         Month number
    `%(month-name)`    Name of month (see |g:wiki_month_names|)
    `%(year)`          Year (4 digits)

  See |wiki-templates-journal-summaries| for more info.

  Default: `'# Summary, %(year) %(month-name)'`

*g:wiki_template_title_week*
  A string that specifies the title of the week template. The following keys
  are interpolated:

    `%(week)`    Week number
    `%(year)`    Year (4 digits)

  See |wiki-templates-journal-summaries| for more info.

  Default: `'# Summary, %(year) week %(week)'`

*g:wiki_viewer*
  A dictionary that specifies which viewer to use for a given filetype. The
  entry `_` specifies the fallback or generic viewer. This option thus allows
  one to setup different viewers for different file types that are used by the
  generic link scheme handler (|wiki-link-url|) and by |WikiExport|.

  Default: >
    let g:wiki_viewer = {
        \ '_' : OS Dependent: 'xdg-open' (Linux) | 'open' (OSX),
        \}

*g:wiki_write_on_nav*
  Option to specify whether or not to save the current file automatically
  before navigating (forward or backward) between wiki links.

  Default: 0

*g:wiki_zotero_root*
  A string that specifies the Zotero root folder used for the zotero URL
  scheme, see |wiki-link-url|.

  Default: `'~/.local/zotero'`

------------------------------------------------------------------------------
EVENTS                                                     *wiki-config-events*

The following |User| events are available. The following shows an example for
how to use this: >

  augroup MyWikiAutocmds
    autocmd!
    autocmd User WikiLinkFollowed normal! zz
    autocmd User WikiBufferInitialized
          \ nmap <buffer> gf <plug>(wiki-link-follow)
  augroup END

*WikiBufferInitialized*
  Event is triggered after the buffer features are initialized. This event
  allows one to apply custom mappings and similar.

*WikiLinkFollowed*
  Event is triggered after a link has been followed.

*WikiReloadPost*
  Event is triggered after wiki.vim has been reloaded with |WikiReload|.

==============================================================================
COMMANDS                                                        *wiki-commands*

The following is a list of commands that are available in the wiki. Most of
the commands are also available as mappings of the form `<plug>(wiki-[name])`.

*WikiEnable*
  Load |wiki.vim| for the current file. If the current file type is not in
  |g:wiki_filetypes|, then it will be added, so that interwiki links will be
  possible.

*<plug>(wiki-index)*
*WikiIndex*
  Go to wiki index. When not inside a wiki page, the index is specified by the
  option |g:wiki_root|.

*<plug>(wiki-open)*
*WikiOpen*
  Open (or create) a page. Asks for user input to specify the page name. When
  not already inside a wiki, the wiki root is given by |g:wiki_root|. If
  |g:wiki_map_create_page| is specified, it will be used to transform the
  input name before opening/creating the page.

*<plug>(wiki-journal)*
*WikiJournal*
  Go to todays journal entry.

*<plug>(wiki-reload)*
*WikiReload*
  Reload the wiki plugin. Mostly useful for plugin development.

*<plug>(wiki-graph-find-backlinks)*
*WikiGraphFindBacklinks*
  Find backlinks to current page.

*<plug>(wiki-graph-check-links)*
*WikiGraphCheckLinks*
  Check the wiki for broken links. If any broken links are found, they are
  added to the location list (|location-list|) and the location list is
  opened. The process of checking for broken links can take a while if you
  have a large wiki.

*<plug>(wiki-graph-in)*
*<plug>(wiki-graph-out)*
*WikiGraphIn*
*WikiGraphOut*
  Show link graph in to or out of the current page. A count may be given to
  limit the depth of the graph.

*<plug>(wiki-link-next)*
*WikiLinkNext*
  Go to next link.

*<plug>(wiki-link-prev)*
*WikiLinkPrev*
  Go to previous link.

*<plug>(wiki-link-follow)*
*WikiLinkFollow*
  Follow link. Will create a new link if the text under the cursor is not
  already a link. If |g:wiki_map_link_create| is specified, it will be used to
  transform the link when creating it.

                                                       *#User#WikiLinkFollowed*
  The user autocommand `WikiLinkFollowed` is triggered after a wiki link has
  been followed. This allows the user to add custom functionality after
  following wiki links. For example, to center the cursor inside the window
  after following a link: >

    augroup MyWikiAutocmds
      autocmd!
      autocmd User WikiLinkFollowed normal! zz
    augroup END

*<plug>(wiki-link-follow-split)*
*WikiLinkFollowSplit*
  Similar to |WikiLinkfollow|, except wiki links are followed in a |vsplit|.

*<plug>(wiki-link-return)*
*WikiLinkReturn*
  Go back to previous page.

*<plug>(wiki-link-toggle)*
*<plug>(wiki-link-toggle-visual)*    |xmap|
*<plug>(wiki-link-toggle-operator)*  |map-operator|
*WikiLinkToggle*
  Toggle wiki link. If |g:wiki_map_link_create| is specified, it will be used
  to transform the link when creating it.

*<plug>(wiki-link-show)*
*WikiLinkShow*
  Show some info on link under cursor.

*<plug>(wiki-link-extract-header)*
*WikiLinkExtractHeader*
  Set link title from the first header of the target file.

*<plug>(wiki-page-delete)*
*WikiPageDelete*
  Delete wiki page.

*<plug>(wiki-page-rename)*
*WikiPageRename*
  Rename wiki page (will update all links to the page).

*<plug>(wiki-page-toc)*
*WikiPageToc*
  Create/Update table of contents.

*<plug>(wiki-page-toc-local)*
*WikiPageTocLocal*
  Create/Update table of contents (section local variant).

*<plug>(wiki-journal-index)*
*WikiJournalIndex*
  Insert a sorted list of links to all journal pages below the cursor. It uses
  the link style specified by |g:wiki_link_target_type|.

*<plug>(wiki-journal-next)*
*WikiJournalNext*
  Go to next day/week/month.

*<plug>(wiki-journal-prev)*
*WikiJournalPrev*
  Go to previous day/week/month.

*<plug>(wiki-journal-copy-tonext)*
*WikiJournalCopyToNext*
  Copy current entry to next work day (unless the entry for next workday
  already exists).

*<plug>(wiki-journal-toweek)*
*WikiJournalToWeek*
  Go to week summary. If not existing, then parse the day entries to make
  a first draft. The title is given by |g:wiki_template_title_week|. For more
  info, see |wiki-templates-journal-summaries|.

*<plug>(wiki-journal-tomonth)*
*WikiJournalToMonth*
  Go to month summary. If not existing, then parse the day entries and
  relevant week summaries to make a first draft. The title is given by
  |g:wiki_template_title_month|. See also |wiki-templates-journal-summaries|.

*<plug>(wiki-export)*
[range]*WikiExport*  [options] [fname]
  Export the current wiki file with `pandoc`. The main argument `fname`
  specifies the target filename and format (implied by the file extension),
  e.g. `test.pdf` or `test.html`. If `fname` is not specified, then the
  `-path` option is used to determine the output location. In this case, the
  `-view` option is activated regardless of the basic configuration.

  Available options are given below. The default values are specified in the
  dictionary |g:wiki_export|.

  -args~
    Specify extra arguments for `pandoc`.

  -from-format FRMT | -f FRMT~
    Specify format of the wiki page.

  -ext EXT~
    Specify extension to use if `fname` is not provided.

  -link_ext_replace~
    Set to true to replace in-wiki link extensions with html. This enables
    in-browser wiki navigation. Requires `ext` be set to `html` and for
    |g:wiki_link_extension| to be non-empty to have any meaningful effect.

  -output~
    Set output directory where the exported file is stored. Relative paths are
    relative to the wiki root.

  -view~
    Set to true to open documents with specified `viewer` by default.

  -viewer PATH~
    Specify viewer to use to open the exported file. This implies `-view` and
    overrides the |g:wiki_viewer| option.

  Note: This feature requires `pandoc` (https://pandoc.org/) to build the
        output files.

*<plug>(wiki-tag-list)*
*WikiTagList*
  Show list of detected tags.

*<plug>(wiki-tag-reload)*
*WikiTagReload*
  Source wiki files and reload tags.

*<plug>(wiki-tag-search)*
*WikiTagSearch*  [options] [tag]
  List wiki pages that contain the desired `tag`. If the argument `tag` is not
  supplied, the command asks for input. See also |wiki-tags| for more
  information of the tags feature and |WikiFzfTags| for an alternative search
  mechanism.

  Available options are (use |g:wiki_tags| to set default values):

  -output TRG~
    Where to put the search result. `TRG` may be one of:

      * `loclist`   Use |location-list|
      * `echo`      Display results on screen
      * `scratch`   Add results to a scratch buffer
      * `cursor`    Insert result below cursor

*CtrlPWiki*
  Open |CtrlP| in find file mode for wiki files in current wiki or in the main
  wiki defined by |g:wiki_root|.

*<plug>(wiki-fzf-pages)*
*WikiFzfPages*
  Open |fzf| in find file mode for wiki files in current wiki or in the main
  wiki defined by |g:wiki_root|.

  One may pass additional options to fzf with the |g:wiki_fzf_pages_opts|
  option. This allows more fine grained control of fzf, e.g. to add
  a previewer.

  This can also be used to create a new page. If a query is typed and the key
  specified by |g:wiki_fzf_pages_force_create_key| is pressed (alt-enter, by
  default), a page whose name is equal to the query will be created if it
  doesn't already exist. If the page does already exist, it will be opened.
  If |g:wiki_map_create_page| is defined, the new page name is determined by
  first applying that function to the query.

  For example, suppose you search for "foo", and there is one result: an
  already-existing page named "foobar". If the enter key is pressed, the
  existing "foobar" will be opened, as usual. However, if
  |g:wiki_fzf_pages_force_create_key| is pressed instead, a new page titled
  "foo" will be created and opened.

  For convenience, if the input query does not have any results, simply
  pressing enter will also create a page.  E.g., if you searched for "My Fzf
  Page", and this term does not exist, then it will instead open a new page
  "My Fzf Page.wiki" (or similar, depending on the value of other options).

*<plug>(wiki-fzf-tags)*
*WikiFzfTags*
  Open |fzf| and search for tags.

*<plug>(wiki-fzf-toc)*
*WikiFzfToc*
  Open |fzf| and list table of contents entries for the current wiki page.

==============================================================================
MAPPINGS                                                        *wiki-mappings*

Here we describe the mappings provided by the wiki plugin, as well as the
default maps. Note that most of the mappings are also available as commands.
These mappings are described in |wiki-commands|.

------------------------------------------------------------------------------
TEXT OBJECTS                                           *wiki-mappings-text-obj*

The following mappings are available as visual mode and operator mode
mappings, i.e. |xmap| and |omap|.

*<plug>(wiki-au)*
*<plug>(wiki-iu)*
  Text object for link URLs.

*<plug>(wiki-at)*
*<plug>(wiki-it)*
  Text object for link texts.

------------------------------------------------------------------------------
DEFAULT MAPPINGS                                        *wiki-mappings-default*

This is a list of default mappings. For a more detailed description of each
mapping, read the documentation of the `<plug>(wiki-[name])` form of the
mapping. The mode specifier is a single letter which indicates which mode the
mapping is valid in. See e.g. |nmap|, |imap|, |omap| or |xmap| for more
information about the different modes.

  ---------------------------------------------------------------------~
   MODE  LHS                 RHS~
  ---------------------------------------------------------------------~
   `n`     <leader>ww          |<plug>(wiki-index)|               [GLOBAL]
   `n`     <leader>wn          |<plug>(wiki-open)|                [GLOBAL]
   `n`     <leader>w<leader>w  |<plug>(wiki-journal)|             [GLOBAL]
   `n`     <leader>wx          |<plug>(wiki-reload)|              [GLOBAL]
   `n`     <leader>wb          |<plug>(wiki-graph-find-backlinks)|
   `n`     <leader>wlc         |<plug>(wiki-graph-check-links)|
   `n`     <leader>wg          |<plug>(wiki-graph-in)|
   `n`     <leader>wG          |<plug>(wiki-graph-out)|
   `n`     <leader>wf          |<plug>(wiki-link-toggle)|
   `n`     <leader>wd          |<plug>(wiki-page-delete)|
   `n`     <leader>wr          |<plug>(wiki-page-rename)|
   `n`     <leader>wt          |<plug>(wiki-page-toc)|
   `n`     <leader>wT          |<plug>(wiki-page-toc-local)|
   `n`     <leader>wp          |<plug>(wiki-export)|
   `x`     <leader>wp          |<plug>(wiki-export)|
   `n`     <leader>wll         |<plug>(wiki-link-show)|
   `n`     <leader>wlh         |<plug>(wiki-link-extract-header)|
   `n`     <leader>wsl         |<plug>(wiki-tag-list)|
   `n`     <leader>wsr         |<plug>(wiki-tag-reload)|
   `n`     <leader>wss         |<plug>(wiki-tag-search)|
   `n`     <tab>               |<plug>(wiki-link-next)|
   `n`     <cr>                |<plug>(wiki-link-follow)|
   `n`     <c-w><cr>           |<plug>(wiki-link-follow-split)|
   `n`     <s-tab>             |<plug>(wiki-link-prev)|
   `n`     <bs>                |<plug>(wiki-link-return)|
   `n`     gl                  |<plug>(wiki-link-toggle-operator)|
   `x`     <cr>                |<plug>(wiki-link-toggle-visual)|
   `ox`    au                  |<plug>(wiki-au)|
   `ox`    iu                  |<plug>(wiki-iu)|
   `ox`    at                  |<plug>(wiki-at)|
   `ox`    it                  |<plug>(wiki-it)|
  ---------------------------------------------------------------------~

==============================================================================
LINKS                                                               *wiki-link*

Links are one of the most essential features of a wiki, and as such, requires
particular attention.  A link is a structure that consists of an URL (see
|wiki-link-url|) and a possibly empty description.  It may be followed with
the mappings `<cr>` or `<c-cr>`, where the latter will open the link in a split
(if it is an internal link).  One may use `<bs>` to navigate back after
following a link.

These are the link formats that are currently supported with some examples:

- Link URLs                          |wiki-link-url|
    `http://www.example.com`
    `wiki:index`
    `journal:2013-04-05`
    `doi:10.1002%2Fandp.19053220607`
- Wiki links                         |wiki-link-wiki|
    `[[URL]]`
    `[[URL|Description]]`
- Markdown links                     |wiki-link-markdown|
    `[Description](URL)`
- Markdown image links               |wiki-link-image|
    `![Caption text](URL)`
- Reference links                    |wiki-link-reference|
    `[Target]`
    `[Description][Target]`
- Zotero shortlink                   |wiki-link-zotero|
    `@citekey`
- AsciiDoc cross-reference links     |wiki-link-adoc-xref|
    `<<URL#,Description>>`
    `xref:URL[Description]`
- AsciiDoc link macro                |wiki-link-adoc-link|
    `link:URL[Description]`

------------------------------------------------------------------------------
LINK URLS                                                      *wiki-link-url*

An URL, which is short for Uniform Resource Locator, has the general format

  `[scheme:]address`

The `scheme` specifies which kind of link it is. When the URL is typed
directly and with a proper scheme, it will typically be possible to follow the
link directly without putting it inside a fuller link type.

When the scheme is not specified for URLs inside one of the other link types,
then the `wiki` scheme is generally assumed (unless otherwise stated).

The following schemes are supported:

  wiki~
  journal~
    Links to internal wiki pages.  The address can be both relative and
    absolute.  Absolute addresses are relative to the wiki root.  Further, the
    addresses may include anchors to specific sections of the wiki entry.
    Some examples might be enlightening: >

      wiki:index

      If the address has whitespace, we need to use a full link style, for
      instance:

      [[wiki:index#section 1]]

      Also, to link to a journal entry, one may use:
      journal:2014-03-02

      For convenience, an ISO date will also work as a journal link.
<
  file~
    Links to a local file. |g:wiki_viewer| is used by default to open a file.
    For more user flexibility, one can implement a custom file handler with
    |g:wiki_file_handler|.

    This scheme is the default scheme for |wiki-link-image|.

  doi~
    Will use the `generic` scheme handler on an expanded URL of the form
    `http://dx.doi.org/<address>`, where `<address>` is the link address.

  zot~
    This is an early version of a Zotero scheme. It uses `fd`, `fdfind`, or
    `find` (in preferred order) to search the Zotero storage for a matching
    pdf. This works very well if one uses the Zotfile extension and the Better
    Bibtex extension to ensure that all pdf files are named according to the
    format `%b - {%T - } {%t}`, where `%b` is the citekey. Then links like
    `zot:citekey` should result in a unique matches. The resulting file is
    opened with |g:wiki_viewer|. The Zotero storage root may be specified with
    |g:wiki_zotero_root|.

  generic~
    If the scheme is not recognized, the link is followed with the system
    handler, which is defined by the `_` key of |g:wiki_viewer| on Linux.
    Currently, only Linux is supported here.  This will work quite well on
    standard Linux distributions, e.g. for following `http` and `https` URLs.

Schemes are defined in `autoload/wiki/url/{scheme}.vim`, which means it is
relatively easy to define new custom schemes. See the generic scheme for
a simple example of how this is implemented.

------------------------------------------------------------------------------
WIKI LINKS                                                     *wiki-link-wiki*

Wiki links are similar in style to the standard Mediawiki links.  This is the
main syntax for creating internal wiki links.  The description part is
optional.  Examples: >

  [[URL]]
  [[URL|Description]]

Any non-link words may be turned into a wiki link with the `<cr>` mapping.
One may also use visual mode to turn a selection into a wiki link, or one may
use the `gl` operator.

The `<leader>wf` mapping can be used to add a description to a wiki link or to
toggle it to a markdown style link.

------------------------------------------------------------------------------
MARKDOWN LINKS                                             *wiki-link-markdown*

Markdown links are one of the standard type of links, and the look like this: >

  [Description](URL)

One may toggle between markdown style links and wiki style links with the
`<leader>wf` mapping.

------------------------------------------------------------------------------
MARKDOWN IMAGE LINKS                                          *wiki-link-image*

Markdown image links are similar to markdown links: >

  ![Caption text](URL)

One may toggle between markdown style links and wiki style links with the
`<leader>wf` mapping.

------------------------------------------------------------------------------
REFERENCE LINKS                                           *wiki-link-reference*

Reference style links are slightly different.  They consist of up to three
parts: An optional `description`, a `target` and a `link.`  The syntax is best
explained through an example: >

  The most simple form, and perhaps the most useful one, is to add a simple
  reference like this [1].

  One may also add a [description][target].

  The target may consist of both words and numbers, e.g. [like this][Ref 3].

  [1]: URL 1
  [Target]: URL 2
  [Ref 3]: URL 3

Reference style links may be followed with `<cr>` both on the reference
location and on the link line.

------------------------------------------------------------------------------
ZOTERO SHORTLINKS                                            *wiki-link-zotero*

As a minor convenience link type, Zotero URLs may be written in short as
`@citekey` instead of `zot:citekey`. See also |wiki-link-url| for more info on
the Zotero URL scheme and handler.

------------------------------------------------------------------------------
ASCIIDOC CROSS REFERENCES                                 *wiki-link-adoc-xref*

AsciiDoc cross-reference links or xrefs [0] look like this: >

  Bracket style
    <<anchor>>
    <<anchor,Description>>
    <<filename.adoc#anchor>>
    <<filename.adoc#anchor,Description>>

  Inline macro
    xref:anchor[Description]
    xref:filename.adoc#anchor[Description]
    xref:[LONG URL][Description]

The `[LONG URL]` variant is supported for cases where the filename contains
spaces.

[0]: https://docs.asciidoctor.org/asciidoc/latest/macros/xref/

------------------------------------------------------------------------------
ASCIIDOC LINK MACROS                                      *wiki-link-adoc-link*

The AsciiDoc link macro [0] is a generic link syntax that looks like this: >

  link:<target>[<attrlist>]

The `[<attrlist>]` will be recognized by wiki.vim as the link text.

[0]: https://docs.asciidoctor.org/asciidoc/latest/macros/link-macro/

==============================================================================
COMPLETION                                                    *wiki-completion*

This plugin provides an |omni-complete| function that completes internal link
targets, including anchors.  This should work both for markdown and wiki
style links (see |wiki-link|).

------------------------------------------------------------------------------
AUTOCOMPLETE                                             *wiki-completion-auto*

Vim does not provide automatic completion by itself, but there exist at least
several good plugins that provide this: |coc-nvim|, |deoplete|, |neocomplete|,
|ncm2|, |nvim-completion-manager|, |youcompleteme|, and |nvim-compe|.
Moreover, there is |VimCompletesMe| that overrides <tab> to trigger different
built-in completions, such as omni completion, depending on the
context. Below are instructiongs for how to setup some of these autocomplete
plugins for wiki.vim.

ncm2~
|ncm2| is a modern remake and replacement of |nvim-completion-manager| and is
supposed to be a "Slim, Fast and Hackable Completion Framework for Neovim":
https://github.com/ncm2/ncm2

The following configuration shows how to enable autocompletion of wiki style
links after `[[`: >

  augroup my_cm_setup
    autocmd!
    autocmd BufEnter * call ncm2#enable_for_buffer()
    autocmd User WikiBufferInitialized call ncm2#register_source({
          \ 'name': 'wiki',
          \ 'priority': 9,
          \ 'scope': ['wiki'],
          \ 'word_pattern': '\w+',
          \ 'complete_pattern': '\[\[',
          \ 'on_complete': ['ncm2#on_complete#delay', 200,
          \                 'ncm2#on_complete#omni',
          \                 'wiki#complete#omnicomplete'],
          \})
  augroup END

==============================================================================
TAGS                                                                *wiki-tags*

Wiki pages may be tagged with keywords for organization. By default, tags use
the syntax `:tag-name:`. Multiple tags may be specified both with `:tag1: :tag2:`
and with the short form `:tag1:tag2:`. The tag name must consist of purely
non-space characters. By default, all tags added in the top 15 lines of a file
will be recognized.

You may customize the format of tags by modifying the
|g:wiki_tags_format_pattern| variable.

The number of lines in which tags are recognized can be costumized by modifying
the |g:wiki_tags_scan_num_lines| variable.

Related commands:
- |WikiTagList|
- |WikiTagReload|
- |WikiTagSearch|
- |WikiFzfTags|

Related settings:
- |g:wiki_tags|

==============================================================================
TEMPLATES                                                      *wiki-templates*

New pages are empty by default. However, it is possible to define templates
for prefilling new pages. Templates are specified with the option
|g:wiki_templates|, and if a template matches the new page it will be applied.
Only the first template that matches will be applied.

The templates can be specified as user functions or as template files. User
functions assume a single variable such as described in
|wiki-templates-context|. The template files should be formatted as described
in |wiki-templates-format|.

There is also a special kind of journal summary template which is described in
|wiki-templates-journal-summaries|.

Related settings:
- |g:wiki_templates|

------------------------------------------------------------------------------
TEMPLATE FUNCTION CONTEXT                              *wiki-templates-context*

The functions in |g:wiki_templates| assume a single argument `context` which
is a dictionary with the following values:

  Key          Description              Example~
  ===          ===========              =======
  `name`         Filename (no extension)  "New Page"
  `path`         Full path                "/path/to/wiki/sub/New Page.md"
  `path_wiki`    Wiki path                "/sub/New Page.md"
  `origin_file`  Previous file            "/path/to/wiki/index.md"
  `origin_lnum`  Previous lnum            123
  `date`         ISO date                 2021-07-01
  `time`         Time (24h format)        19:30

------------------------------------------------------------------------------
TEMPLATE FILE FORMAT                                    *wiki-templates-format*

A template file is essentially a simple text file to your liking. There are
two rules that allow dynamic templates:

  1. Variable substitution with `{variable}` strings. The allowed variables
     are the same as those available in |wiki-templates-context|.
  2. Function substitution with `{{Function Text String Here}}` strings. The
     text string is passed as a single string argument. The context dictionary
     (|wiki-templates-context|) is also passed as the second argument. The
     function is assumed to return either a string or a list of strings.

The first rule is applied first, which allows the arguments in Rule 2 to be
variable substitutions.

Pre-defined functions:~
  `wiki#template#case_title(string)`

An example of how these templates could be useful: If you keep a separate blog
directory in your wiki, you could add a `.template.md` file with the following
content to ensure that you follow the same structure: >

  # {{wiki#template#case_title {name}}}
  Created: {date} {time}

  # Introduction

  # Conclusion

------------------------------------------------------------------------------
JOURNAL SUMMARIES                            *wiki-templates-journal-summaries*

|wiki.vim| supports parsing the journal entries in order to make weekly and
monthly summaries. A summary is automatically created when a summary file is
opened; the format is given by `g:wiki_journal.date_format.weekly` and
`g:wiki_journal.date_format.monthly`. One may also move from a daily entry to
the corresponding week with |WikiJournalToWeek|, and similarly to the
corresponding month with |WikiJournalToMonth|. Again, if these entries do not
exist, they are automatically created and journal entries are parsed to fill
the contents.

The parsed results typically need manual editing, and it currently only works
for a very specific format of journals.

Related settings:
- |g:wiki_journal|
  Note: The date format specifies the format for the weekly and monthly
        entries.
- |g:wiki_template_title_week|
  A string that specifies the title of the weekly summary.
- |g:wiki_template_title_month|
  A string that specifies the title of the monthly summary.

Related commands:
- |WikiJournalToWeek|
- |WikiJournalToMonth|

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:fdm=marker:cole=2:
